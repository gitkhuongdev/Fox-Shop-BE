name: Deploy Laravel Project on push

on:
  push:
    branches:
      - main

jobs:
  web-deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Get the latest code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Install Composer dependencies
        run: |
          composer install --no-scripts --no-progress --no-suggest
        continue-on-error: false # Capture errors, but continue to allow for the error notification

      - name: Update Composer dependencies
        run: |
          composer update --no-scripts --no-progress --no-suggest
        continue-on-error: false

      - name: Dump autoload files
        run: composer dump-autoload --optimize
        continue-on-error: false

      - name: Generate storage link
        run: php artisan storage:link
        continue-on-error: false

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
        continue-on-error: false

      - name: Install Node.js (latest version)
        uses: actions/setup-node@v2

      - name: Create .env file
        run: |
          cat <<EOF > .env
          APP_NAME=Laravel
          APP_ENV=production
          APP_KEY=base64:WeusMhc/VRlYb0ZHIbJfkh5FKBnZ5vyTjTfHjPStAS0=
          APP_DEBUG=true
          APP_TIMEZONE=UTC
          APP_URL=http://localhost
          APP_LOCALE=en
          APP_FALLBACK_LOCALE=en
          APP_FAKER_LOCALE=en_US
          APP_MAINTENANCE_DRIVER=file
          # APP_MAINTENANCE_STORE=database
          BCRYPT_ROUNDS=12
          LOG_CHANNEL=stack
          LOG_STACK=single
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug
          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          SESSION_DRIVER=database
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          SESSION_PATH=/
          SESSION_DOMAIN=null
          BROADCAST_CONNECTION=log
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=database
          CACHE_STORE=database
          CACHE_PREFIX=
          MEMCACHED_HOST=127.0.0.1
          REDIS_CLIENT=phpredis
          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379
          MAIL_MAILER=smtp
          MAIL_HOST='smtp.gmail.com'
          MAIL_PORT=587
          MAIL_USERNAME=
          MAIL_PASSWORD= 
          MAIL_ENCRYPTION='tls'
          MAIL_FROM_ADDRESS=
          MAIL_FROM_NAME="${APP_NAME}"
          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false
          GOOGLE_CLIENT_ID=
          GOOGLE_CLIENT_SECRET=
          GOOGLE_REDIRECT=
          # GOOGLE_REDIRECT=
          VITE_APP_NAME="\${APP_NAME}"

      - name: Install NPM dependencies
        run: npm install
        continue-on-error: false

      - name: Build front-end assets
        run: npm run build
        continue-on-error: false

      - name: Remove node_modules folder
        run: rm -rf node_modules

      - name: Remove vendor folder
        run: rm -rf vendor

      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.SERVER }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          server-dir: /
          exclude: |
            .git*
            .gitignore
            .htaccess
            node_modules/
            vendor/

      - name: Check for deployment errors
        id: check_error
        run: |
          if [ -f /path/to/log/file ]; then
            echo "error_output=$(tail -n 20 /path/to/log/file)" >> $GITHUB_ENV
          else
            echo "error_output=No errors captured." >> $GITHUB_ENV
          fi

  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs:
      - web-deploy
    if: ${{ always() }} # Always notify, regardless of success or failure

    steps:
      - name: Notify Discord
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.TOKEN }}
          discord-webhook: ${{ secrets.WEBHOOK }}
          username: "GitHub Bot Actions"
          avatar-url: "https://cdn-icons-png.flaticon.com/512/4712/4712086.png"
          title: "Deploy Status: ${{ job.status }}"
          description: |
            Build and deploy to GitHub Pages: ${{ job.status }}.
            Error output (if any): ${{ env.error_output }}
          color-success: "#4287f5"
          color-failure: "#eb4034"
          color-cancelled: "#42daf5"
